******  Spring  ******

Получение параметров из URL

@RequestMapping(value="/user/{userId}/invoices", method = RequestMethod.GET)
public List<Invoice> listUsersInvoices(
            @PathVariable("userId") int user,
            @RequestParam(value = "date", required = false) Date dateOrNull) {
  ...
}

required - обязательно ли параметр должен быть в запросе



******  Entity  ******

@Entity
Данный класс является сущностью, т.е. отображается в БД при помощи Spring Data.

@Table(name = "author", catalog = "library")
Позволяет указать название таблицы, соответствующей данному классу и схемму, в которой эта таблица находится в БД.
Данная аннотация используется если схемм больше одной и если имя класса отличается от имени таблицы.

@DynamicUpdate
При обновлении объекта класса PreparedStatement будет включать только столбцы, значения которых были изменены (а не все)

@DynamicInsert
При сохранении нового объекта в БД PreparedStatement будет включать только ненулевые столбцы.

@SelectBeforeUpdate
Получает объект из БД перед обновлением, проверяет действительно ли он изменился и обновляет только если он
действительно изменился.

@JoinColumn
Используется для полей, которые являются внешним ключем (или частью внешнего ключа). Позволяет сохранить в поле не сам внешний
ключ, а сущность, на которую этот ключ указывает. Атрибут name указывает какой именно столбец таблицы БД является внешним
ключем для сущности, сохраняемой в это поле.


******  Repository  ******

@Query("JPQL запрос")
Предназначена для определения пользовательского запроса к БД на JPQL. Аннотирует метод, который будет выполнять данный запрос.
Обычно это методы @Repository. Метод объявляется без тела (т.е. объявляется только имя метода, тип возвращаемого результата и
аргументы метода). Также, запрос можно писать на SQL, используя параметр nativeQuery:
@Query(nativeQuery = true, value = "запрос_на_SQL")

@Modifying
Аннотирует методы, выполняющие запрос к БД на изменение. Актуальна только сочетании с аннотацией @Query. Сообщает
spring-data-jpa, что этот запрос является операцией обновления, и для него требуется executeUpdate(), а не executeQuery().
Запросы, требующие аннотации @Modifying: INSERT, UPDATE, DELETE и DDL. Очищает EntityManager от устаревших сущностей.

@Param
Применяется для явного именования параметров метода, выполняющего запрос к БД. По умолчанию, Spring Data JPA использует
внедрение параметров на основе их позиций. Это может породить ошибку при невнимательном рефакторинге, когда порядок
параметров может измениться. Чтобы решить эту проблему, можно использовать аннотацию @Param, чтобы задать параметру
определенное имя по которому он будет использоваться в запросе, как показано в следующем примере:
@Query("select u from User u where u.firstname = :firstname or u.lastname = :lastname")
User findByLastnameOrFirstname(@Param("lastname") String lastname, @Param("firstname") String firstname);




******  Lombok  ******

@Getter
Создает геттеры для класса.

@Setter
Создает сеттеры для класса.

@EqualsAndHashCode(of = "id")   // hashcode будет вычисляться только на основе поля id
Может быть применена к любому классу. Добавляет методы Equals и HashCode, по умолчанию используются все нестатические,
не-transient поля. Поле можно исключить добавил его в значения атрибута exclude, или можно явно указать какие поля
нужно использовать при помощи атрибута of (в приведенном примере методы будут использовать только значение поля id).





